Используется:
	React.js 18.2.0
	TypeScript 4.7.4
	ANTD 4.21.3
	
	Node.js 16.15.1
	npm 8.11.0
	
	create-react-app 5.0.1
	

_______________________________________________________________________________________________________________________
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
_______________________________________________________________________________________________________________________
1. Инициализация проекта 
	
	// ставим пакеты необходимые для инициализации
	npm i create-react-app@latest -g - ставим инициализатор шаблона React проекта (флаг -g: глобальная установка)
	npm i typescript@latest -g - типизированный JS (@latest - последнюю версию)
	
	// При помощи NPX(node package execution-выполнение пакетов node) создаем шаблон проекта 
	npx create-react-app . --template typescript (--template - выбор шаблона)
	
	// ставим остальные нужные пакеты
	npm i antd@latest - ANT Design пакет с готовыми решениями для верстки (альтернатива materialUI)
	npm i craco-alias@latest -D - Алиасы (для упрощения путей при импорте файлов ../../../.. VS '@folder/..')
	npm i craco@latest - необходим для работы craco-alias
	npm i styled-components@latest - CSS IN JS
	npm i --save-dev @types/styled-components - требуется для TS
	npm i react-router-dom@latest - управление DOM деревом (смена компонентов)
	npm i axios@latest - для запросов к back-end
	
	- Очищаем все лишнее из index.ts и App.ts
	
	-изменяем скрипты в package.json:
		
		"scripts": {
			"start": "craco start",
			"build": "craco build"
		}
	
_______________________________________________________________________________________________________________________
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
_______________________________________________________________________________________________________________________
2. АЛИАСЫ CRACO
	
	- в tsconfig.json добавляем "extends": "./tsconfig.paths.json" - ссылка на пути
	
	- создаем в корне tsconfig.paths.json(тут указываем нужные пути до папок):
		{
			"compilerOptions": {
				"baseUrl": "./src",
				"paths": {
					"@components/*": ["components/*"],
					"@context/*": ["context/*"],
					"@interfaces/*": ["interfaces/*"],
					"@hooks/*": ["hooks/*"],
					"@img/*": ["assets/img/*"],
					"@routes/*": ["routes/*"],
					"@pages/*": ["pages/*"],
					"@config/*": ["config/*"],
					"@styles/*": ["styles/*"]
				}
			}
		}
	
	- создаем в корне craco.config.js(тут базовая настройка craco, т.к. он может не только алиасы):
		const CracoAlias = require('craco-alias')
		module.exports = {
			plugins: [
				{
					plugin: CracoAlias,
					options: {
						source: 'tsconfig',
						baseUrl: './src',
						tsConfigPath: './tsconfig.paths.json',
					},
				},
			],
		}
	
_______________________________________________________________________________________________________________________
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
_______________________________________________________________________________________________________________________
3. GIT
	
	- т.к. create-react-app синициализировал нам GIT, самим это делать уже не требуется
	- git branch -m main - меняем ветку на main (пушить в master - плохо)
	- создаем удаленный репозиторий <remote git repo>
	- git remote add origin (<remote git repo name> git@github.com:...)
	- git add . - добавляем все изменения 
	- git commit -m "initial commit" - фиксируем изменения якорем
	
	- git push --set-upstream origin main - закидываем наш проект на удаленный репозиторий
	
_______________________________________________________________________________________________________________________
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
_______________________________________________________________________________________________________________________
4. README.md
	
	Для проекта надо подготовить хорошее описание. При составлении описания можно придерживаться такого плана:
		1. название (желательно и его изображение тоже. Отредактировать можно на canva.com, если вы не специалист по графическому дизайну);
		2. описание (с использованием слов и изображений);
		3. демо (изображения, ссылки на видео, интерактивные демо-ссылки);
		4. технологии в проекте;
		5. что-то характерное для проекта (проблемы, с которыми пришлось столкнуться, уникальные составляющие проекта);
		6. техническое описание проекта (установка, настройка, как помочь проекту).
		
	
	https://htmlacademy.ru/blog/articles/markdown - синтаксис markdown
	
	
_______________________________________________________________________________________________________________________
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
_______________________________________________________________________________________________________________________
5. Аутентификация
	
	-Создаем страницы /auth/login и /auth/register
	-Создаем страницу /temp - страница-заглушка в роли приватный страницы
	-Создаем роутинг в src/route/Routes.ts
	-Создаем контекст и методы контекста
	-Пользуясь методами общения клиент-сервер редактируем методы контекста login и register такого
		чтобы они отправляли запрос и плучали ответ
	-Ссылаясь на состояние пользователя в контексте isAuth отдаем разные роуты